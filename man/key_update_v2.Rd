% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/key_update_v2.R
\name{key_update_v2}
\alias{key_update_v2}
\title{Update existing key file to version 2 with additional information and
new features}
\usage{
key_update_v2(sheetName,
  keyFileDownloadPath = "/home/shares/lter-som/key_file_download/",
  keyFileArchivePath = "/home/shares/lter-som/key_file_archive/",
  keyFileUploadPath = "/home/shares/lter-som/key_file_upload/",
  keyFileUpdateLogPath = "/home/shares/lter-som/key_file_update_log.csv")
}
\arguments{
\item{sheetName}{name of key file in Google Drive to update with version 2
changes}

\item{keyFileDownloadPath}{a intermediary directory to where the key file
from Google Drive may be downloaded for importing into the R environment}

\item{keyFileArchivePath}{directory to where csv versions of the location and
profile tabs of the sheet to be updated will be archived}

\item{keyFileUploadPath}{a intermediary directory to where the new key
workbook from the R environment can be saved for eventual upload to Google
Drive}

\item{keyFileUpdateLogPath}{log file that catalogs the occurence of a
succesful update of a key file. This file must exist in advance of running
the update utility}
}
\value{
key_update_v2 actions and output include: (1) csv versions of the
source key file location and profie tabs are written to a specified
directory; (2) a new key file is created with desired version 2
modifications; if successful, the key file update action is written to an
identified key file update log.
}
\description{
Early work with the SOM data indicated that additional details
about the data sets are required. To accomodate more detail, new additions
to the key file are needed. The key_update_v2 function addresses desired
changes to the key files. It is critical that information already entered
into key files was not lost, so the new key file features had to be added
to existing key file without information loss.
}
\note{
\strong{key_update_v2 workflow:}
\enumerate{
\item download project key file with googledrive
\item load downloaded (now xlsx) into R with openxlsx::loadWorkbook (see note)
\item additions to the workbook object as needed
\item prescribe validations with openxlsx::dataValidation
\item fix styling as needed with openxlsx::createSytle/addStyle
\item write workbook back to file with openxlsx::write.xlsx (or saveWorkbook)
\item upload workbook back to project directory to be followed by a re-homog
}

The workflow was getting hung up at step 2 in the workflow. The
solution was to use the development branch of the openxlsx package (see
https://github.com/awalker89/openxlsx/issues/386)
devtools::install_github("awalker89/openxlsx") Rcpp package is a dependency

\strong{Key file version 2 new features include:}
\enumerate{
\item several new metadata fields in the location tab ('time_series',
'gradient', 'experiments', 'control_id', 'number_treatments',
'merge_align', 'key_version').
\item A new 'logical' column in the Units tab to facilitate a YES, NO
drop-down option for several of the new metadata fields added to the
location tab.
\item Revised options in the Units tab for the list of drop-down options in
the treatment rows of the Profile tab.
\item Add pull-down menu for units field of lit_lig in location tab.
\item Clarify meanings (Var_long field) of profle tab c_tot and soc (bulk, not
fraction).
\item Duplicate var values in the Location and Profile tabs are renamed with
unique names.
}

Though specific to version 2 features, this workflow could be modified
to implement new features for future versions.

This workflow defaults to being run on Aurora with default file paths
set to that environment. These paths can be altered for the function to
work outside of the Aurora environemnt, but the lter-som group should not
do this as we need to document all changes, and a log file must exist.

\strong{To establish or reset a keyfile update log:}\preformatted{  create template for logging details of key file upversions (caution: this code
  will overwrite an existing log)

  keyFileUpdateLogPath <- '/home/shares/lter-som/key_file_update_log.csv'

  tibble(
    keyFileName = as.character(NA),
    keyFileDirectory = as.character(NA),
    timestamp = as.POSIXct(NA)
  ) \%>\%
  write_csv(path = keyFileUpdateLogPath, append = FALSE)

}
}
\examples{
\dontrun{

 If running on Aurora, the only relevant parameter is the name of the key
 file to update.

 key_update_v2('621_Key_Key_test')

 However, if not running on Aurora, all directory-related parameters must be
 passed (the path to a key file log is optional).

 key_update_v2(sheetName = 'cap.557.Key_Key_master',
               keyFileDownloadPath = '~/Desktop/somdev/key_file_download/',
               keyFileArchivePath = '~/Desktop/somdev/key_file_archive/',
               keyFileUploadPath = '~/Desktop/somdev/key_file_upload/')

 Example with path to keyFileUpdateLog - the log must exist at the specified
 location.

 key_update_v2(sheetName = 'cap.557.Key_Key_master',
               keyFileDownloadPath = '~/Desktop/somdev/key_file_download/',
               keyFileArchivePath = '~/Desktop/somdev/key_file_archive/',
               keyFileUploadPath = '~/Desktop/somdev/key_file_upload/',
               keyFileUpdateLogPath = '~/Desktop/keyUpdateLogFile.csv' )

}

}
